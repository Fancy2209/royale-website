{ "type": "class",
  "qname": "mx.controls.AdvancedDataGrid",
  "baseClassname": "mx.controls.listClasses.AdvancedListBase"
  ,
    "description": "The AdvancedDataGrid control expands on the functionality of the standard DataGrid control to add data visualization features to your Apache Flex application. These features provide greater control of data display, data aggregation, and data formatting.  The <code>AdvancedDataGrid</code> control is like a List control except that it can show more than one column of data, making it suited for showing objects with multiple properties. <p> The AdvancedDataGrid control provides the following features: <ul> <li>Columns of different widths or identical fixed widths.</li> <li>Columns that the user can resize at run time. </li> <li>Columns that the user can reorder at run time. </li> <li>Optional customizable column headers.</li> <li>Ability to use a custom item renderer for any column to display data other than text.</li> <li>Support for sorting the data by clicking on a column.</li> </ul> </p> The AdvancedDataGrid control is intended for viewing data, and not as a layout tool like an HTML table. The mx.containers package provides those layout tools.  <p> The <code>&lt;mx:AdvancedDataGrid&gt;</code> tag inherits all of the tag attributes of its superclass, except for <code>labelField</code>, <code>iconField</code>, and <code>iconFunction</code>, and adds the following tag attributes: </p> <pre> &lt;mx:AdvancedDataGrid <b>Properties</b> displayDisclosureIcon=\\&quot;true|false\\&quot; displayItemsExpanded=\\&quot;false|true\\&quot; groupedColumns=\\&quot;[]\\&quot; groupIconFunction=\\&quot;null\\&quot; groupItemRenderer=\\&quot;AdvancedDataGridGroupItemRenderer\\&quot; groupLabelFunction=\\&quot;null\\&quot; groupRowHeight=\\&quot;-1\\&quot; itemIcons=\\&quot;undefined\\&quot; lockedColumnCount=\\&quot;0\\&quot; lockedRowCount=\\&quot;0\\&quot; rendererProviders=\\&quot;[]\\&quot; selectedCells=\\&quot;null\\&quot; treeColumn=\\&quot;null\\&quot;  <b>Styles</b> alternatingItemColors=\\&quot;undefined\\&quot; defaultLeafIcon=\\&quot;TreeNodeIcon\\&quot; depthColors=\\&quot;undefined\\&quot; disclosureClosedIcon=\\&quot;TreeDisclosureClosed\\&quot; disclosureOpenIcon=\\&quot;TreeDisclosureOpen\\&quot; folderClosedIcon=\\&quot;TreeFolderClosed\\&quot; folderOpenIcon=\\&quot;TreeFolderOpen\\&quot; headerHorizontalSeparatorSkin=\\&quot;undefined\\&quot; indentation=\\&quot;17\\&quot; openDuration=\\&quot;250\\&quot; openEasingFunction=\\&quot;undefined\\&quot; paddingLeft=\\&quot;2\\&quot; paddingRight=\\&quot;0\\&quot; selectionDisabledColor=\\&quot;#DDDDDD\\&quot; selectionEasingFunction=\\&quot;undefined\\&quot; sortFontFamily=\\&quot;Verdana\\&quot; sortFontSize=\\&quot;10\\&quot; sortFontStyle=\\&quot;normal\\&quot; sortFontWeight=\\&quot;normal\\&quot; textRollOverColor=\\&quot;#2B333C\\&quot; textSelectedColor=\\&quot;#2B333C\\&quot;  <b>Events</b> headerDragOutside=\\&quot;<i>No default</i>\\&quot; headerDropOutside=\\&quot;<i>No default</i>\\&quot; itemClose=\\&quot;<i>No default</i>\\&quot; itemOpen=\\&quot;<i>No default</i>\\&quot; itemOpening=\\&quot;<i>No default</i>\\&quot; /&gt;  <b><i>The following AdvancedDataGrid code sample specifies the column order:</i></b> &lt;mx:AdvancedDataGrid&gt; &lt;mx:dataProvider&gt; &lt;mx:Object Artist=\\&quot;Pavement\\&quot; Price=\\&quot;11.99\\&quot; Album=\\&quot;Slanted and Enchanted\\&quot;/&gt; &lt;mx:Object Artist=\\&quot;Pavement\\&quot; Album=\\&quot;Brighten the Corners\\&quot; Price=\\&quot;11.99\\&quot;/&gt; &lt;/mx:dataProvider&gt; &lt;mx:columns&gt; &lt;mx:AdvancedDataGridColumn dataField=\\&quot;Album\\&quot;/&gt; &lt;mx:AdvancedDataGridColumn dataField=\\&quot;Price\\&quot;/&gt; &lt;/mx:columns&gt; &lt;/mx:AdvancedDataGrid&gt; </pre> </p>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/AdvancedDataGridExample.mxml"]},
      {  "tagName": "see",
         "values": ["mx.controls.advancedDataGridClasses.AdvancedDataGridItemRenderer", "mx.controls.advancedDataGridClasses.AdvancedDataGridColumn", "mx.controls.advancedDataGridClasses.AdvancedDataGridDragProxy", "mx.events.AdvancedDataGridEvent", "mx.controls.DataGrid"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.controls.AdvancedDataGrid",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "dataProvider",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Set of data to be viewed. This property lets you use most types of objects as data providers. If you set the <code>dataProvider</code> property to an Array, it will be converted to an ArrayCollection. If you set the property to an XML object, it will be converted into an XMLListCollection with only one item. If you set the property to an XMLList, it will be converted to an XMLListCollection. If you set the property to an object that implements the IList or ICollectionView interface, the object will be used directly.  <p>As a consequence of the conversions, when you get the <code>dataProvider</code> property, it will always be an ICollectionView, and therefore not necessarily be the type of object you used to  you set the property. This behavior is important to understand if you want to modify the data in the data provider: changes to the original data may not be detected, but changes to the ICollectionView object that you get back from the <code>dataProvider</code> property will be detected.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null", "null", "null"]},
            {  "tagName": "see",
               "values": ["mx.collections.ICollectionView", "mx.collections.ICollectionView", "mx.collections.ICollectionView"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3", "Flex 3", "Flex 3"]},
            {  "tagName": "royaleignorecoercion",
               "values": ["org.apache.royale.core.ISelectionModel", "org.apache.royale.core.ISelectionModel", "org.apache.royale.core.ISelectionModel"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0", "3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "lockedColumnCount",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The index of the first column in the control that scrolls. Columns to the left of this one remain fixed in view.  <p>When using column groups, a column group is considered to be a single column. For example, if you set this property to 2, and the left-most two column groups contain two and three children, respectively, then you have effectively locked the first five columns of the control.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "groupedColumns",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An Array that defines the hierarchy of AdvancedDataGridColumn instances when performing column grouping. If you specify both the <code>columns</code> and <code>groupedColumns</code> properties, the control uses the <code>groupedColumns</code> property and ignores the <code>columns</code> property.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "selectedCells",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Contains an Array of cell locations as row and column indices. Changing the value of the <code>selectionMode</code> property sets this property to <code>null</code>.  <p>Note that these row and column indices are absolute values, irrespective of the display. This is explained by a typical <code>selectedCells</code> property setting as follows:</p>  <pre> selectedCells = [ { rowIndex : r1, columnIndex : c1 }, { rowIndex : r2, columnIndex : c2 }, ... ]</pre>  <p>Then, dataProvider[r1], columns[c1], dataProvider[r2], columns[c2], etc. will always be valid.</p>  <p>If you want to programmatically change the set of selected cells, you must get this Array, make modifications to the cells and order of cells in the Array, and then assign the new array to the <code>selectedCells</code> property. This is because the AdvancedDataGrid control returns a new copy of the Array of selectedCells and therefore does not notice the changes.</p>  <p>The value of the <code>selectionMode</code> property determines the data in the <code>rowIndex</code> and <code>columnIndex</code> properties, as the following table describes:</p>  <table class=\\&quot;innertable\\&quot;> <tr> <th><code>selectionMode</code></th> <th>Value of <code>rowIndex</code> and <code>columnIndex</code> properties</th> </tr> <tr> <td>none</td> <td>No selection allowed in the control, and <code>selectedCells</code> is null. </td> </tr> <tr> <td><code>singleRow</code>  </td> <td>Click any cell in the row to select the row. After the selection, <code>selectedCells</code> contains a single Object: <p>[{rowIndex:selectedRowIndex, columnIndex: -1}]</p></td> </tr> <tr> <td><code>multipleRows</code></td> <td>Click any cell in the row to select the row. While holding down the Control key, click any cell in another row to select the row for discontiguous selection. While holding down the Shift key, click any cell in another row to select multiple, contiguous rows. After the selection, <code>selectedCells</code> contains one Object for each selected row: <p>[   {rowIndex: selectedRowIndex1, columnIndex: -1}, {rowIndex: selectedRowIndex2, columnIndex: -1}, ... {rowIndex: selectedRowIndexN, columnIndex: -1} ] </p></td> </tr> <tr> <td><code>singleCell</code></td> <td>Click any cell to select the cell. After the selection, <code>selectedCells</code> contains a single Object: <p>[{rowIndex: selectedRowIndex, columnIndex:selectedColIndex}] </p></td> </tr> <tr> <td><code>multipleCells</code></td> <td>Click any cell to select the cell. While holding down the Control key, click any cell to select the cell multiple discontiguous selection. While holding down the Shift key, click any cell to select multiple, contiguous cells. After the selection, <code>selectedCells</code> contains one Object for each selected cell: <p>[   {rowIndex: selectedRowIndex1, columnIndex: selectedColIndex1}, {rowIndex: selectedRowIndex2, columnIndex: selectedColIndex2}, ... {rowIndex: selectedRowIndexN, columnIndex: selectedColIndexN} ] </p></td> </tr> </table>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "designViewDataType",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "mx.collections.IHierarchicalCollectionView",
        "qname": "hierarchicalCollectionView",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The IHierarchicalCollectionView instance used by the control.  <p>The default value is an internal instance of the HierarchicalCollectionView class.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.collections.IHierarchicalCollectionView"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "isItemOpen",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Returns <code>true</code> if the specified branch node is open.  This Object contains the data provider element for the branch node.",
        "tags": [
        {  "tagName": "param",
               "values": ["item Branch node to inspect."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "return",
               "values": ["<code>true</code> if open, and <code>false</code> if not."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "openNode",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Open a node",
        "tags": [
        {  "tagName": "param",
               "values": ["item Branch node to open."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "closeNode",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Open a node",
        "tags": [
        {  "tagName": "param",
               "values": ["item Branch node to open."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "columns",
        "namespace": "public",
        "bindable": ["columnsChanged"],
        "details": [],
        "deprecated": {},
          "description": "An array of DataGridColumn objects, one for each column that can be displayed.  If not explicitly set, the DataGrid control attempts to examine the first data provider item to determine the set of properties and display those properties in alphabetic order.  <p>If you want to change the set of columns, you must get this array, make modifications to the columns and order of columns in the array, and then assign the new array to the columns property.  This is because the DataGrid control returned a new copy of the array of columns and therefore did not notice the changes.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "selectionMode",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The selection mode of the control. Possible values are: <code>MULTIPLE_CELLS</code>, <code>MULTIPLE_ROWS</code>, <code>NONE</code>, <code>SINGLE_CELL</code>, and <code>SINGLE_ROW</code>. Changing the value of this property sets the <code>selectedCells</code> property to null.  <p>You must set the <code>allowMultipleSelection</code> property to <code>true</code> to select more than one item in the control at the same time.</p>  <p>Information about the selected cells is written to the <code>selectedCells</code> property.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["SINGLE_ROW"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "sortableColumns",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether the user can sort the data provider items by clicking on a column header cell. If <code>true</code>, the user can sort the data provider items by clicking on a column header cell. The <code>AdvancedDataGridColumn.dataField</code> property of the column or the <code>AdvancedDataGridColumn.sortCompareFunction</code> property of the column is used as the sort field. If a column is clicked more than once, the sort alternates between ascending and descending order. If <code>true</code>, individual columns can be made to not respond to a click on a header by setting the column's <code>sortable</code> property to <code>false</code>.  <p>When a user releases the mouse button over a header cell, the AdvancedDataGrid control dispatches a <code>headerRelease</code> event if both this property and the column's sortable property are <code>true</code>. If no handler calls the <code>preventDefault()</code> method on the event, the AdvancedDataGrid sorts using that column's <code>AdvancedDataGridColumn.dataField</code> or <code>AdvancedDataGridColumn.sortCompareFunction</code> properties.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "see",
               "values": ["mx.controls.advancedDataGridClasses.AdvancedDataGridColumn#dataField", "mx.controls.advancedDataGridClasses.AdvancedDataGridColumn#sortCompareFunction"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "sortExpertMode",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "By default, the <code>sortExpertMode</code> property is set to <code>false</code>, which means you click in the header area of a column to sort the rows of the AdvancedDataGrid control by that column. You then click in the multiple-column sort area of the header to sort by additional columns. If you set the <code>sortExpertMode</code> property to <code>true</code>, you use the Control key to select every column after the first column to perform sort.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "headerHeight",
        "namespace": "public",
        "bindable": ["resize"],
        "details": [],
        "deprecated": {},
          "description": "The height of the header cell of the column, in pixels. If set explicitly, that height will be used for all of the headers.  If not set explicitly, the height will based on style settings and the header renderer.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "headerWordWrap",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If <code>true</code>, specifies that text in the header is wrapped if it does not fit on one line.  If the <code>headerWordWrap</code> property is set in AdvancedDataGridColumn, this property will not have any effect.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "draggableColumns",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Indicates whether you are allowed to reorder columns. If <code>true</code>, you can reorder the columns of the AdvancedDataGrid control by dragging the header cells.",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "HeaderStyleName",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "resizableColumns",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether the user can change the size of the columns. If <code>true</code>, the user can stretch or shrink the columns of the AdvancedDataGrid control by dragging the grid lines between the header cells. If <code>true</code>, individual columns must also have their <code>resizeable</code> properties set to <code>false</code> to prevent the user from resizing a particular column.",
        "tags": [
        {  "tagName": "default",
               "values": ["true"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "org.apache.royale.core.IBead",
        "qname": "presentationModel",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The DataGrid's presentation model",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.2", "AIR 2.6"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9"]},
            {  "tagName": "royaleignorecoercion",
               "values": ["org.apache.royale.core.IDataGridPresentationModel", "org.apache.royale.core.IBead"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "destroyItemEditor",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "return": "void",
          "params": []}
      ]
  ,
  "events": [
  { "qname": "headerRelease",
        "type": "mx.events.AdvancedDataGridEvent"
      ,
          "description": "Dispatched when the user releases the mouse button on a column header to request the control to sort the grid contents based on the contents of the column. Only dispatched if the column is sortable and the data provider supports sorting. The AdvancedDataGrid control has a default handler for this event that implements a single-column sort.  Multiple-column sort can be implemented by calling the <code>preventDefault()</code> method to prevent the single column sort and setting the <code>sort</code> property of the data provider. <p> <b>Note</b>: The sort arrows are defined by the default event handler for the <code>headerRelease</code> event. If you call the <code>preventDefault()</code> method in your event handler, the arrows are not drawn. </p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.AdvancedDataGridEvent.HEADER_RELEASE"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemEditBeginning",
        "type": "mx.events.AdvancedDataGridEvent"
      ,
          "description": "Dispatched when the user releases the mouse button while over an item renderer, tabs to the AdvancedDataGrid control or within the AdvancedDataGrid control, or in any other way attempts to edit an item.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.AdvancedDataGridEvent.ITEM_EDIT_BEGINNING"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemEditEnd",
        "type": "mx.events.AdvancedDataGridEvent"
      ,
          "description": "Dispatched when an item editing session ends for any reason.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.AdvancedDataGridEvent.ITEM_EDIT_END"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemEditBegin",
        "type": "mx.events.AdvancedDataGridEvent"
      ,
          "description": "Dispatched when an item editing session ends for any reason.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.AdvancedDataGridEvent.ITEM_EDIT_BEGIN"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
