{ "type": "class",
  "qname": "mx.controls.DataGrid",
  "baseClassname": "mx.controls.listClasses.ListBase"
  ,
    "description": "The <code>DataGrid</code> control is like a List except that it can show more than one column of data making it suited for showing objects with multiple properties. <p> The DataGrid control provides the following features: <ul> <li>Columns of different widths or identical fixed widths</li> <li>Columns that the user can resize at runtime </li> <li>Columns that the user can reorder at runtime </li> <li>Optional customizable column headers</li> <li>Ability to use a custom item renderer for any column to display data other than text</li> <li>Support for sorting the data by clicking on a column</li> </ul> </p> The DataGrid control is intended for viewing data, and not as a layout tool like an HTML table. The mx.containers package provides those layout tools.  <p>The DataGrid control has the following default sizing characteristics:</p> <table class=\\&quot;innertable\\&quot;> <tr> <th>Characteristic</th> <th>Description</th> </tr> <tr> <td>Default size</td> <td>If the columns are empty, the default width is 300 pixels. If the columns contain information but define no explicit widths, the default width is 100 pixels per column. The DataGrid width is sized to fit the width of all columns, if possible. The default number of displayed rows, including the header is 7, and each row, by default, is 20 pixels high. </td> </tr> <tr> <td>Minimum size</td> <td>0 pixels.</td> </tr> <tr> <td>Maximum size</td> <td>5000 by 5000.</td> </tr> </table>  <p> The <code>&lt;mx:DataGrid&gt;</code> tag inherits all of the tag attributes of its superclass, except for <code>labelField</code>, <code>iconField</code>, and <code>iconFunction</code>, and adds the following tag attributes: </p> <pre> &lt;mx:DataGrid <b>Properties</b> columns=\\&quot;<i>From dataProvider</i>\\&quot; draggableColumns=\\&quot;true|false\\&quot; editable=\\&quot;false|true\\&quot; editedItemPosition=\\&quot;<code>null</code>\\&quot; horizontalScrollPosition=\\&quot;null\\&quot; imeMode=\\&quot;null\\&quot; itemEditorInstance=\\&quot;null\\&quot; minColumnWidth=\\&quot;<code>NaN</code>\\&quot; resizableColumns=\\&quot;true|false\\&quot; sortableColumns=\\&quot;true|false\\&quot;  <b>Styles</b> backgroundDisabledColor=\\&quot;0xEFEEEF\\&quot; columnDropIndicatorSkin=\\&quot;DataGridColumnDropIndicator\\&quot; columnResizeSkin=\\&quot;DataGridColumnResizeSkin\\&quot; disabledIconColor=\\&quot;0x999999\\&quot; headerColors=\\&quot;[#FFFFFF, #E6E6E6]\\&quot; headerDragProxyStyleName=\\&quot;headerDragProxyStyle\\&quot; headerSeparatorSkin=\\&quot;DataGridHeaderSeparator\\&quot; headerStyleName=\\&quot;dataGridStyles\\&quot; horizontalGridLineColor=\\&quot;0xF7F7F7\\&quot; horizontalGridLines=\\&quot;false|true\\&quot; horizontalLockedSeparatorSkin=\\&quot;undefined\\&quot; horizontalSeparatorSkin=\\&quot;undefined\\&quot; iconColor=\\&quot;0x111111\\&quot; rollOverColor=\\&quot;0xB2E1FF\\&quot; selectionColor=\\&quot;0x7FCEFF\\&quot; sortArrowSkin=\\&quot;DataGridSortArrow\\&quot; stretchCursor=\\&quot;<i>\\&quot;cursorStretch\\&quot; symbol from the Assets.swf file</i>\\&quot; verticalGridLineColor=\\&quot;0xCCCCCC\\&quot; verticalGridLines=\\&quot;false|true\\&quot; verticalLockedSeparatorSkin=\\&quot;undefined\\&quot; verticalSeparatorSkin=\\&quot;undefined\\&quot;  <b>Events</b> columnStretch=\\&quot;<i>No default</i>\\&quot; headerRelease=\\&quot;<i>No default</i>\\&quot; headerShift=\\&quot;<i>No default</i>\\&quot; itemEditBegin=\\&quot;<i>No default</i>\\&quot; itemEditBeginning=\\&quot;<i>No default</i>\\&quot; itemEditEnd=\\&quot;<i>No default</i>\\&quot; itemFocusIn=\\&quot;<i>No default</i>\\&quot; itemFocusOut=\\&quot;<i>No default</i>\\&quot; /&gt;  <b>The following DataGrid code sample specifies the column order:</b> &lt;mx:DataGrid&gt; &lt;mx:dataProvider&gt; &lt;mx:Object Artist=\\&quot;Pavement\\&quot; Price=\\&quot;11.99\\&quot; Album=\\&quot;Slanted and Enchanted\\&quot;/&gt; &lt;mx:Object Artist=\\&quot;Pavement\\&quot; Album=\\&quot;Brighten the Corners\\&quot; Price=\\&quot;11.99\\&quot;/&gt; &lt;/mx:dataProvider&gt; &lt;mx:columns&gt; &lt;mx:DataGridColumn dataField=\\&quot;Album\\&quot;/&gt; &lt;mx:DataGridColumn dataField=\\&quot;Price\\&quot;/&gt; &lt;/mx:columns&gt; &lt;/mx:DataGrid&gt; </pre> </p>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/SimpleDataGrid.mxml"]},
      {  "tagName": "see",
         "values": ["mx.controls.dataGridClasses.DataGridItemRenderer", "mx.controls.dataGridClasses.DataGridColumn", "mx.controls.dataGridClasses.DataGridDragProxy", "mx.events.DataGridEvent"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.controls.DataGrid",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "columns",
        "namespace": "public",
        "bindable": ["columnsChanged"],
        "details": [],
        "deprecated": {},
          "description": "An array of DataGridColumn objects, one for each column that can be displayed.  If not explicitly set, the DataGrid control attempts to examine the first data provider item to determine the set of properties and display those properties in alphabetic order.  <p>If you want to change the set of columns, you must get this array, make modifications to the columns and order of columns in the array, and then assign the new array to the columns property.  This is because the DataGrid control returned a new copy of the array of columns and therefore did not notice the changes.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "org.apache.royale.core.IBead",
        "qname": "presentationModel",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The DataGrid's presentation model",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.2", "AIR 2.6"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9"]},
            {  "tagName": "royaleignorecoercion",
               "values": ["org.apache.royale.core.IDataGridPresentationModel", "org.apache.royale.core.IBead"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
