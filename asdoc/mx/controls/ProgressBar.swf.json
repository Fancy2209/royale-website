{ "type": "class",
  "qname": "mx.controls.ProgressBar",
  "baseClassname": "mx.core.UIComponent"
  ,
    "description": "The ProgressBar control provides a visual representation of the progress of a task over time. There are two types of ProgressBar controls: determinate and indeterminate.  <p>A determinate ProgressBar control is a linear representation of the progress of a task over time. You use a determinate ProgressBar when the scope of the task is known. It displays when the user has to wait for an extended amount of time.</p>  <p>An indeterminate ProgressBar control represents time-based processes for which the scope is not yet known. As soon as you can determine the scope, you should use a determinate ProgressBar control.</p>  <p>The ProgressBar control has the following default characteristics:</p> <table class=\\&quot;innertable\\&quot;> <tr> <th>Characteristic</th> <th>Description</th> </tr> <tr> <td>default size</td> <td>150 pixels wide by 4 pixels high</td> </tr> <tr> <td>Minimum size</td> <td>0 pixels</td> </tr> <tr> <td>Maximum size</td> <td>Undefined</td> </tr> </table>   <p>The <code>&lt;mx:ProgressBar&gt;</code> tag inherits all of the tag attributes of its superclass, and adds the following tag attributes:</p>  <pre> &lt;mx:ProgressBar <strong>Properties</strong> conversion=\\&quot;1\\&quot; direction=\\&quot;right|left\\&quot; indeterminate=\\&quot;false|true\\&quot; label=\\&quot;<i>No default</i>\\&quot; labelPlacement=\\&quot;bottom|top|left|right|center\\&quot; maximum=\\&quot;0\\&quot; minimum=\\&quot;0\\&quot; mode=\\&quot;event|polled|manual\\&quot; source=\\&quot;<i>No default</i>\\&quot;  <strong>Styles</strong> barColor=\\&quot;undefined\\&quot; barSkin=\\&quot;ProgressBarSkin\\&quot; borderColor=\\&quot;0xAAB3B3\\&quot; color=\\&quot;0x0B333C\\&quot; disabledColor=\\&quot;0xAAB3B3\\&quot; fontAntiAliasType=\\&quot;advanced\\&quot; fontFamily=\\&quot;Verdana\\&quot; fontGridFitType=\\&quot;pixel\\&quot; fontSharpness=\\&quot;0\\&quot; fontSize=\\&quot;10\\&quot; fontThickness=\\&quot;0\\&quot; fontStyle=\\&quot;normal|italic\\&quot; fontWeight=\\&quot;normal|bold\\&quot; horizontalGap=\\&quot;8\\&quot; indeterminateMoveInterval=\\&quot;26\\&quot; indeterminateSkin=\\&quot;ProgressIndeterminateSkin\\&quot; labelWidth=\\&quot;Computed\\&quot; leading=\\&quot;0\\&quot; maskSkin=\\&quot;ProgressMaskSkin\\&quot; paddingLeft=\\&quot;0\\&quot; paddingRight=\\&quot;0\\&quot; textAlign=\\&quot;left|right|center\\&quot; textDecoration=\\&quot;none|underline\\&quot; textIndent=\\&quot;0\\&quot; themeColor=\\&quot;haloGreen|haloBlue|haloOrange\\&quot; trackColors=\\&quot;[0xE6EEEE,0xE6EEEE]\\&quot; trackHeight=\\&quot;Calculated\\&quot; trackSkin=\\&quot;ProgressTrackSkin\\&quot; verticalGap=\\&quot;6\\&quot;  <strong>Events</strong> complete=\\&quot;<i>No default</i>\\&quot; hide=\\&quot;<i>No default</i>\\&quot; progress=\\&quot;<i>No default</i>\\&quot; show=\\&quot;<i>No default</i>\\&quot;  <strong>Effects</strong> completeEffect=\\&quot;<i>No default</i>\\&quot; /&gt; </pre> </p>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/SimpleProgressBar.mxml"]},
      {  "tagName": "see",
         "values": ["mx.controls.ProgressBarDirection", "mx.controls.ProgressBarLabelPlacement", "mx.controls.ProgressBarMode"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]},
      {  "tagName": "royalesuppresspublicvarwarning",
         "values": []}  ],
  "members": [
  { "type": "method",
        "qname": "mx.controls.ProgressBar",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "conversion",
        "namespace": "public",
        "bindable": ["conversionChanged"],
        "details": [],
        "deprecated": {},
          "description": "Number used to convert incoming current bytes loaded value and the total bytes loaded values. Flex divides the current and total values by this property and uses the closest integer that is less than or equal to each value in the label string. A value of 1 does no conversion.",
        "tags": [
        {  "tagName": "default",
               "values": ["1"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "direction",
        "namespace": "public",
        "bindable": ["directionChanged"],
        "details": [],
        "deprecated": {},
          "description": "Direction in which the fill of the ProgressBar expands toward completion. Valid values in MXML are <code>\\&quot;right\\&quot;</code> and <code>\\&quot;left\\&quot;</code>.  <p>In ActionScript, you use use the following constants to set this property: <code>ProgressBarDirection.RIGHT</code> and <code>ProgressBarDirection.LEFT</code>.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.controls.ProgressBarDirection"]},
            {  "tagName": "default",
               "values": ["ProgressBarDirection.RIGHT"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "indeterminate",
        "namespace": "public",
        "bindable": ["indeterminateChanged"],
        "details": [],
        "deprecated": {},
          "description": "Whether the ProgressBar control has a determinate or indeterminate appearance. Use an indeterminate appearance when the progress status cannot be determined. If <code>true</code>, the appearance is indeterminate.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "label",
        "namespace": "public",
        "bindable": ["labelChanged"],
        "details": [],
        "deprecated": {},
          "description": "Text that accompanies the progress bar. You can include the following special characters in the text string:  <ul> <li>%1 = current loaded bytes</li> <li>%2 = total bytes</li> <li>%3 = percent loaded</li> <li>%% = \\&quot;%\\&quot; character</li> </ul>  <p>If a field is unknown, it is replaced by \\&quot;??\\&quot;. If undefined, the label is not displayed.</p>  <p>If you are in manual mode, you can set the values of these special characters by using the <code>setProgress()</code> method.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["&quot;LOADING %3%%&quot;"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "labelPlacement",
        "namespace": "public",
        "bindable": ["labelPlacementChanged"],
        "details": [],
        "deprecated": {},
          "description": "Placement of the label. Valid values in MXML are <code>\\&quot;right\\&quot;</code>, <code>\\&quot;left\\&quot;</code>, <code>\\&quot;bottom\\&quot;</code>, <code>\\&quot;center\\&quot;</code>, and <code>\\&quot;top\\&quot;</code>.  <p>In ActionScript, you can use use the following constants to set this property: <code>ProgressBarLabelPlacement.RIGHT</code>, <code>ProgressBarLabelPlacement.LEFT</code>, <code>ProgressBarLabelPlacement.BOTTOM</code>, <code>ProgressBarLabelPlacement.CENTER</code>, and <code>ProgressBarLabelPlacement.TOP</code>.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.controls.ProgressBarLabelPlacement"]},
            {  "tagName": "default",
               "values": ["ProgressBarLabelPlacement.BOTTOM"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "maximum",
        "namespace": "public",
        "bindable": ["maximumChanged"],
        "details": [],
        "deprecated": {},
          "description": "Largest progress value for the ProgressBar. You can only use this property in manual mode.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "minimum",
        "namespace": "public",
        "bindable": ["minimumChanged"],
        "details": [],
        "deprecated": {},
          "description": "Smallest progress value for the ProgressBar. This property is set by the developer only in manual mode.",
        "tags": [
        {  "tagName": "default",
               "values": ["0"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "mode",
        "namespace": "public",
        "bindable": ["modeChanged"],
        "details": [],
        "deprecated": {},
          "description": "Specifies the method used to update the bar. Use one of the following values in MXML:  <ul> <li><code>event</code> The control specified by the <code>source</code> property must dispatch progress and completed events. The ProgressBar control uses these events to update its status. The ProgressBar control only updates if the value of the <code>source</code> property extends the EventDispatcher class.</li>  <li><code>polled</code> The <code>source</code> property must specify an object that exposes <code>bytesLoaded</code> and <code>bytesTotal</code> properties. The ProgressBar control calls these methods to update its status.</li>  <li><code>manual</code> You manually update the ProgressBar status. In this mode you specify the <code>maximum</code> and <code>minimum</code> properties and use the <code>setProgress()</code> property method to specify the status. This mode is often used when the <code>indeterminate</code> property is <code>true</code>.</li> </ul>  <p>In ActionScript, you can use use the following constants to set this property: <code>ProgressBarMode.EVENT</code>, <code>ProgressBarMode.POLLED</code>, and <code>ProgressBarMode.MANUAL</code>.</p>",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.controls.ProgressBarMode"]},
            {  "tagName": "default",
               "values": ["ProgressBarMode.EVENT"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "percentComplete",
        "namespace": "public",
        "bindable": ["progress"],
        "details": [],
        "deprecated": {},
          "description": "Percentage of process that is completed.The range is 0 to 100. Use the <code>setProgress()</code> method to change the percentage.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "source",
        "namespace": "public",
        "bindable": ["sourceChanged"],
        "details": [],
        "deprecated": {},
          "description": "Refers to the control that the ProgressBar is measuring the progress of. Use this property only in event and polled mode. A typical usage is to set this property to a Loader control.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "Number",
        "qname": "value",
        "namespace": "public",
        "bindable": ["change"],
        "details": [],
        "deprecated": {},
          "description": "Read-only property that contains the amount of progress that has been made - between the minimum and maximum values.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "visible",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "method",
        "qname": "setProgress",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Sets the state of the bar to reflect the amount of progress made when using manual mode. The <code>value</code> argument is assigned to the <code>value</code> property and the <code>maximum</code> argument is assigned to the <code>maximum</code> property. The <code>minimum</code> property is not altered.",
        "tags": [
        {  "tagName": "param",
               "values": ["value Current value.", "maximum Total or target value."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "value", "type": "Number"},
        { "name": "total", "type": "Number"}]}
      ]
  ,
  "events": [
  { "qname": "complete",
        "type": "org.apache.royale.events.Event"
      ,
          "description": "Dispatched when the load completes.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["org.apache.royale.events.Event.COMPLETE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "hide",
        "type": "mx.events.FlexEvent"
      ,
          "description": "Dispatched when an object's state changes from visible to invisible.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.FlexEvent.HIDE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "progress",
        "type": "org.apache.royale.events.ProgressEvent"
      ,
          "description": "Dispatched as content loads in event or polled mode.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["org.apache.royale.events.ProgressEvent.PROGRESS"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "show",
        "type": "mx.events.FlexEvent"
      ,
          "description": "Dispatched when the component becomes visible.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.FlexEvent.SHOW"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
