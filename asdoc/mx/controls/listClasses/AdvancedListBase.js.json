{ "type": "class",
  "qname": "mx.controls.listClasses.AdvancedListBase",
  "baseClassname": "mx.controls.listClasses.ListBase"
  ,
    "description": "The AdvancedListBase class is the base class for controls, such as the AdvancedDataGrid and OLAPDataGrid controls, that represent lists of items that can have one or more selected items and can scroll through the items.  Items are supplied using the <code>dataProvider</code> property and displayed via item renderers.  <p>In a model/view architecture, the AdvancedListBase subclass represent the view, and the data provider represents the model.</p>   <p>The AdvancedListBase class inherits all of the tag properties of its superclasses, and adds the following tag properties:</p>  <pre> &lt;mx:<i>tagname</i> <b>Properties</b> allowDragSelection=\\&quot;false|true\\&quot; allowMultipleSelection=\\&quot;false|true\\&quot; columnCount=\\&quot;4\\&quot; columnWidth=\\&quot;NaN\\&quot; dataProvider=\\&quot;null\\&quot; dataTipField=\\&quot;label\\&quot; dataTipFunction=\\&quot;null\\&quot; dragEnabled=\\&quot;false|true\\&quot; dragMoveEnabled=\\&quot;false|true\\&quot; dropEnabled=\\&quot;false|true\\&quot; iconField=\\&quot;null\\&quot; iconFunction=\\&quot;null\\&quot; itemRenderer=\\&quot;null\\&quot; labelField=\\&quot;label\\&quot; labelFunction=\\&quot;null\\&quot; lockedColumnCount=0 lockedRowCount=0 menuSelectionMode=\\&quot;false|true\\&quot; rowCount=\\&quot;-1\\&quot; rowHeight=\\&quot;NaN\\&quot; selectable=\\&quot;true|false\\&quot; selectedIndex=\\&quot;-1\\&quot; selectedIndices=\\&quot;null\\&quot; selectedItem=\\&quot;null\\&quot; selectedItems=\\&quot;null\\&quot; showDataTips=\\&quot;false|true\\&quot; variableRowHeight=\\&quot;false|true\\&quot; wordWrap=\\&quot;false|true\\&quot;  <b>Styles</b> alternatingItemColors=\\&quot;undefined\\&quot; dataChangeEffect=\\&quot;undefined\\&quot; dropIndicatorSkin=\\&quot;ListDropIndicator\\&quot; focusAlpha=\\&quot;0.5\\&quot; focusRoundedCorners=\\&quot;tl tr bl br\\&quot; paddingBottom=\\&quot;2\\&quot; paddingLeft=\\&quot;2\\&quot; paddingRight=\\&quot;0\\&quot; paddingTop=\\&quot;2\\&quot; rollOverColor=\\&quot;0xEEFEE6\\&quot; selectionColor=\\&quot;0x7FCEFF\\&quot; selectionDisabledColor=\\&quot;0xDDDDDD\\&quot; selectionDuration=\\&quot;250\\&quot; selectionEasingFunction=\\&quot;undefined\\&quot; textRollOverColor=\\&quot;0x2B333C\\&quot; textSelectedColor=\\&quot;0x2B333C\\&quot; useRollOver=\\&quot;true|false\\&quot; verticalAlign=\\&quot;top|middle|bottom\\&quot;  <b>Events</b> change=\\&quot;<i>No default</i>\\&quot; dataChange=\\&quot;<i>No default</i>\\&quot; itemClick=\\&quot;<i>No default</i>\\&quot; itemDoubleClick=\\&quot;<i>No default</i>\\&quot; itemRollOut=\\&quot;<i>No default</i>\\&quot; itemRollOver=\\&quot;<i>No default</i>\\&quot; itemClick=\\&quot;<i>No default</i>\\&quot; /&gt; </pre>",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.collections.ICollectionView", "mx.controls.AdvancedDataGrid", "mx.controls.OLAPDataGrid"]},
      {  "tagName": "royalesuppresspublicvarwarning",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.controls.listClasses.AdvancedListBase",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "dataProvider",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Set of data to be viewed. This property lets you use most types of objects as data providers. If you set the <code>dataProvider</code> property to an Array, it will be converted to an ArrayCollection. If you set the property to an XML object, it will be converted into an XMLListCollection with only one item. If you set the property to an XMLList, it will be converted to an XMLListCollection. If you set the property to an object that implements the IList or ICollectionView interface, the object will be used directly.  <p>As a consequence of the conversions, when you get the <code>dataProvider</code> property, it will always be an ICollectionView, and therefore not necessarily be the type of object you used to  you set the property. This behavior is important to understand if you want to modify the data in the data provider: changes to the original data may not be detected, but changes to the ICollectionView object that you get back from the <code>dataProvider</code> property will be detected.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["null", "null"]},
            {  "tagName": "see",
               "values": ["mx.collections.ICollectionView", "mx.collections.ICollectionView"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3", "Flex 3"]},
            {  "tagName": "royaleignorecoercion",
               "values": ["org.apache.royale.core.ISelectionModel", "org.apache.royale.core.ISelectionModel"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0"]}  ]},
      { "type": "field",
        "qname": "collection",
        "return": "mx.collections.ICollectionView",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An ICollectionView that represents the data provider. When you set the <code>dataProvider</code> property, Flex wraps the data provider as necessary to support the ICollectionView interface and sets this property to the result. The AdvancedListBase class then uses this property to access data in the provider. When you  get the <code>dataProvider</code> property, Flex returns this value.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "headerStyleName",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "editable",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether drag-selection is enabled. Drag-selection is the ability to select an item by dragging into it as opposed to normal selection where you can't have the mouse button down when you mouse over the item you want to select.  This feature is used in ComboBox dropdowns to support pressing the mouse button when the mouse is over the dropdown button, and then dragging the mouse into the dropdown to select an item.",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]},
            {  "tagName": "royalesuppresspublicvarwarning",
               "values": [""]}  ]},
      { "type": "field",
        "qname": "allowDragSelection",
        "return": "Boolean",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-write",
        "return": "Function",
        "qname": "styleFunction",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-write",
        "return": "int",
        "qname": "columnCount",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The number of columns to be displayed in a TileList control or items in a HorizontalList control. For the data grids, specifies the number of visible columns.  <p><b>Note</b>: Setting this property has no effect on a DataGrid control, which bases the number of columns on the control width and the individual column widths.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["4"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Function",
        "qname": "dataTipFunction",
        "namespace": "public",
        "bindable": ["dataTipFunctionChanged"],
        "details": [],
        "deprecated": {},
          "description": "User-supplied function to run on each item to determine its dataTip. By default, the list looks for a property named <code>label</code> on each data provider item and displays it. However, some items do not have a <code>label</code> property nor do they have another property that can be used for displaying in the rows. An example is a data set that has lastName and firstName fields, but you want to display full names. You can supply a <code>dataTipFunction</code> that finds the appropriate fields and return a displayable string. The <code>dataTipFunction</code> is also good for handling formatting and localization.  <p>The dataTipFunction takes a single argument which is the item in the data provider and returns a String:</p>  <blockquote> <code>myDataTipFunction(item:Object):String</code> </blockquote>",
        "tags": [
        {  "tagName": "default",
               "values": ["null"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "verticalAlign",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "wordWrap",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "A flag that indicates whether text in the row should be word wrapped. If <code>true</code>, enables word wrapping for text in the rows. Only takes effect if <code>variableRowHeight</code> is also <code>true</code>",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "invalidateList",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Refresh all rows on next update.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "collectionChangeHandler",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Handles CollectionEvents dispatched from the data provider as the data changes. Updates the renderers, selected indices and scrollbars as needed.",
        "tags": [
        {  "tagName": "param",
               "values": ["event The CollectionEvent."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "org.apache.royale.events.Event"}]}
      ]
  ,
  "events": [
  { "qname": "change",
        "type": "mx.events.ListEvent"
      ,
          "description": "Dispatched when the <code>selectedIndex</code> or <code>selectedItem</code> property changes as a result of user interaction.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.ListEvent.CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "dataChange",
        "type": "mx.events.FlexEvent"
      ,
          "description": "Dispatched when the <code>data</code> property changes.  <p>When you use a component as an item renderer, the <code>data</code> property contains the data to display. You can listen for this event and update the component when the <code>data</code> property changes.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.FlexEvent.DATA_CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemClick",
        "type": "mx.events.ListEvent"
      ,
          "description": "Dispatched when the user clicks on an item in the control.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.ListEvent.ITEM_CLICK"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "qname": "itemDoubleClick",
        "type": "mx.events.ListEvent"
      ,
          "description": "Dispatched when the user double-clicks on an item in the control.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.ListEvent.ITEM_DOUBLE_CLICK"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
