{ "type": "class",
  "qname": "mx.containers.Panel",
  "baseClassname": "mx.core.Container"
  ,
    "description": "A Halo Panel container consists of a title bar, a caption, a border, and a  content area for its children. Typically, you use Panel containers to wrap top-level application modules. For example, you could include a shopping cart in a Panel container.  <p><b>Note:</b> Adobe recommends that, when possible, you use the Spark Panel container instead of the Halo Panel container.</p>  <p>The Panel container has the following default sizing characteristics:</p> <table class=\\&quot;innertable\\&quot;> <tr> <th>Characteristic</th> <th>Description</th> </tr> <tr> <td>Default size</td> <td>Height is large enough to hold all of its children at the default height of the children, plus any vertical gaps between the children, the top and bottom padding, the top and bottom borders, and the title bar.<br/> Width is the larger of the default width of the widest child plus the left and right padding of the container, or the width of the title text, plus the border.</td> </tr> <tr> <td>Padding</td> <td>4 pixels for the top, bottom, left, and right values.</td> </tr> </table>   <p>The <code>&lt;mx:Panel&gt;</code> tag inherits all of the tag attributes of its superclass and adds the following tag attributes:</p>  <pre> &lt;mx:Panel <strong>Properties</strong> layout=\\&quot;vertical|horizontal|absolute\\&quot; status=\\&quot;\\&quot; title=\\&quot;\\&quot; titleIcon=\\&quot;null\\&quot;  <strong>Styles</strong> borderAlpha=\\&quot;0.4\\&quot; borderThicknessBottom=\\&quot;NaN\\&quot; borderThicknessLeft=\\&quot;10\\&quot; borderThicknessRight=\\&quot;10\\&quot; borderThicknessTop=\\&quot;2\\&quot; controlBarStyleName=\\&quot;null\\&quot; cornerRadius=\\&quot;4\\&quot; dropShadowEnabled=\\&quot;true|false\\&quot; footerColors=\\&quot;null\\&quot; headerColors=\\&quot;null\\&quot; headerHeight=\\&quot;<i>Based on style of title</i>\\&quot; highlightAlphas=\\&quot;[0.3,0]\\&quot; horizontalAlign=\\&quot;left|center|right\\&quot; horizontalGap=\\&quot;8\\&quot; modalTransparency=\\&quot;0.5\\&quot; modalTransparencyBlur=\\&quot;3\\&quot; modalTransparencyColor=\\&quot;#DDDDDD\\&quot; modalTransparencyDuration=\\&quot;100\\&quot; paddingBottom=\\&quot;0\\&quot; paddingTop=\\&quot;0\\&quot; roundedBottomCorners=\\&quot;false|true\\&quot; shadowDirection=\\&quot;center|left|right\\&quot; shadowDistance=\\&quot;2\\&quot; statusStyleName=\\&quot;windowStatus\\&quot; titleBackgroundSkin=\\&quot;TitleBackground\\&quot; titleStyleName=\\&quot;windowStyles\\&quot; verticalAlign=\\&quot;top|middle|bottom\\&quot; verticalGap=\\&quot;6\\&quot;  <strong>Effects</strong> resizeEndEffect=\\&quot;Dissolve\\&quot; resizeStartEffect=\\&quot;Dissolve\\&quot; &gt; ... <i>child tags</i> ... &lt;/mx:Panel&gt; </pre>",
  "tags": [
  {  "tagName": "includeExample",
         "values": ["examples/SimplePanelExample.mxml"]},
      {  "tagName": "see",
         "values": ["spark.components.Panel", "mx.containers.ControlBar", "mx.containers.VBox"]},
      {  "tagName": "mxml",
         "values": []},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.containers.Panel",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "layout",
        "namespace": "public",
        "bindable": ["layoutChanged"],
        "details": [],
        "deprecated": {},
          "description": "Specifies the layout mechanism used for this container. Panel containers can use <code>\\&quot;vertical\\&quot;</code>, <code>\\&quot;horizontal\\&quot;</code>, or <code>\\&quot;absolute\\&quot;</code> positioning. Vertical positioning lays out the child components vertically from the top of the container to the bottom in the specified order. Horizontal positioning lays out the child components horizontally from the left of the container to the right in the specified order. Absolute positioning does no automatic layout and requires you to explicitly define the location of each child component.",
        "tags": [
        {  "tagName": "default",
               "values": ["&quot;vertical&quot;"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "royaleignorecoercion",
               "values": ["mx.containers.beads.models.PanelModel"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "status",
        "namespace": "public",
        "bindable": ["statusChanged"],
        "details": [],
        "deprecated": {},
          "description": "Text in the status area of the title bar.",
        "tags": [
        {  "tagName": "default",
               "values": ["&quot;&quot;"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "title",
        "namespace": "public",
        "bindable": ["titleChanged"],
        "details": [],
        "deprecated": {},
          "description": "Title or caption displayed in the title bar.",
        "tags": [
        {  "tagName": "default",
               "values": ["&quot;&quot;"]},
            {  "tagName": "helpid",
               "values": ["3991"]},
            {  "tagName": "tiptext",
               "values": ["Gets or sets the title/caption displayed in the title bar"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "royaleignorecoercion",
               "values": ["mx.containers.beads.models.PanelModel"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "dropShadowVisible",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "dropShadowVisible (was a style in Flex)",
        "tags": [
        {  "tagName": "inheritDoc",
               "values": []},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "numElements",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "private",
               "values": []},
            {  "tagName": "royaleignorecoercion",
               "values": ["mx.containers.beads.PanelView"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "paddingLeft",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["mx.core.UIComponent", "String", "mx.containers.beads.models.PanelModel", "mx.containers.beads.PanelView"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "paddingRight",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["mx.core.UIComponent", "String", "mx.containers.beads.models.PanelModel", "mx.containers.beads.PanelView"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "paddingTop",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["mx.core.UIComponent", "String", "mx.containers.beads.models.PanelModel", "mx.containers.beads.PanelView"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Object",
        "qname": "paddingBottom",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "royaleignorecoercion",
               "values": ["mx.core.UIComponent", "String", "mx.containers.beads.models.PanelModel", "mx.containers.beads.PanelView"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "percentWidth",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Specifies the width of a component as a percentage of its parent's size. Allowed values are 0-100. The default value is NaN. Setting the <code>width</code> or <code>explicitWidth</code> properties resets this property to NaN.  <p>This property returns a numeric value only if the property was previously set; it does not reflect the exact size of the component in percent.</p>  <p>This property is always set to NaN for the UITextField control.</p>  <p>When used with Spark layouts, this property is used to calculate the width of the component's bounds after scaling and rotation. For example if the component is rotated at 90 degrees, then specifying <code>percentWidth</code> will affect the component's height.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3", "Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "explicitWidth",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "The explicitly set width (as opposed to measured width or percentage width).",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.2", "AIR 2.6", "Flash 10.2", "AIR 2.6"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.0", "Royale 0.0"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "percentHeight",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Specifies the height of a component as a percentage of its parent's size. Allowed values are 0-100. The default value is NaN. Setting the <code>height</code> or <code>explicitHeight</code> properties resets this property to NaN.  <p>This property returns a numeric value only if the property was previously set; it does not reflect the exact size of the component in percent.</p>  <p>This property is always set to NaN for the UITextField control.</p>  <p>When used with Spark layouts, this property is used to calculate the height of the component's bounds after scaling and rotation. For example if the component is rotated at 90 degrees, then specifying <code>percentHeight</code> will affect the component's width.</p>",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3", "Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Number",
        "qname": "explicitHeight",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "The explicitly set width (as opposed to measured width or percentage width).",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10.2", "AIR 2.6", "Flash 10.2", "AIR 2.6"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.0", "Royale 0.0"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0"]}  ]}]
  }
