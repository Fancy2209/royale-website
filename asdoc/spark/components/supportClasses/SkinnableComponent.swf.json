{ "type": "class",
  "qname": "spark.components.supportClasses.SkinnableComponent",
  "baseClassname": "mx.core.UIComponent"
  ,
    "description": "The SkinnableComponent class defines the base class for skinnable components. The skins used by a SkinnableComponent class are typically child classes of the Skin class.  <p>Associate a skin class with a component class by setting the <code>skinClass</code> style property of the component class. You can set the <code>skinClass</code> property in CSS, as the following example shows:</p>  <pre>MyComponent { skinClass: ClassReference(\\&quot;my.skins.MyComponentSkin\\&quot;) }</pre>  <p>The following example sets the <code>skinClass</code> property in MXML:</p>  <pre> &lt;MyComponent skinClass=\\&quot;my.skins.MyComponentSkin\\&quot;/&gt;</pre>",
  "tags": [
  {  "tagName": "see",
         "values": ["spark.components.supportClasses.Skin"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.9.4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "spark.components.supportClasses.SkinnableComponent",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Constructor.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-write",
        "return": "uint",
        "qname": "chromeColor",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {}},
      { "type": "accessor",
        "access": "read-write",
        "return": "Class",
        "qname": "skinClass",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Specifies whether the UIComponent object receives <code>doubleClick</code> events. The default value is <code>false</code>, which means that the UIComponent object does not receive <code>doubleClick</code> events.  <p>The <code>mouseEnabled</code> property must also be set to <code>true</code>, its default value, for the object to receive <code>doubleClick</code> events.</p>",
        "tags": [
        {  "tagName": "default",
               "values": ["false"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Boolean",
        "qname": "enabled",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1", "Flash 9", "AIR 1.1"]},
            {  "tagName": "copy",
               "values": ["mx.core.IUIComponent#enabled", "mx.core.IUIComponent#enabled"]},
            {  "tagName": "productversion",
               "values": ["Flex 3", "Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0", "3.0"]}  ]},
      { "type": "method",
        "qname": "invalidateSkinState",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Marks the component so that the new state of the skin is set during a later screen update.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "mx.core.UIComponent",
        "qname": "skin",
        "namespace": "public",
        "bindable": ["skinChanged"],
        "details": [],
        "deprecated": {},
          "description": "The instance of the skin class for this component instance. This is a read-only property that gets set automatically when Flex calls the <code>attachSkin()</code> method.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "field",
        "qname": "dataGroup",
        "return": "spark.components.DataGroup",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "An optional skin part that defines the DataGroup in the skin class where data items get pushed into, rendered, and laid out.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 10", "AIR 1.5"]},
            {  "tagName": "productversion",
               "values": ["Royale 0.9.4"]},
            {  "tagName": "langversion",
               "values": ["3.0"]},
            {  "tagName": "royalesuppresspublicvarwarning",
               "values": []}  ]},
      { "type": "method",
        "qname": "getCurrentSkinState",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "return": "String",
          "params": []}
      ]
  }
